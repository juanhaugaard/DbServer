server.port=8080
spring.application.name=DbServer

# Embedded Server configuration
h2.server.options=-web -tcp -pg -baseDir ${user.home}/data -trace

# Audit Configuration
h2.audit.url=jdbc:h2:${user.home}/data/EventsDB
h2.audit.init-sql[0]=CREATE SCHEMA IF NOT EXISTS AUDIT;
h2.audit.init-sql[1]=CREATE TABLE IF NOT EXISTS AUDIT.EVENTS (TDAY INT NOT NULL, TSEQ INT NOT NULL, TCATALOG VARCHAR NOT NULL, TSQUEMA VARCHAR NOT NULL, TTABLE VARCHAR NOT NULL, TACTION VARCHAR NOT NULL, PAYLOAD VARCHAR, TTIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL);
h2.audit.init-sql[2]=CREATE PRIMARY KEY IF NOT EXISTS PRIMARY_KEY ON AUDIT.EVENTS(TDAY, TSEQ);
h2.audit.init-sql[3]=CREATE ALIAS IF NOT EXISTS AUDIT_LOG_ENABLE DETERMINISTIC FOR "org.tayrona.dbserver.audit.EnableLog.execute"
h2.audit.init-sql[4]=CREATE ALIAS IF NOT EXISTS AUDIT_LOG_DISABLE DETERMINISTIC FOR "org.tayrona.dbserver.audit.DisableLog.execute"
#h2.audit.init-sql[5]=CREATE INDEX IF NOT EXISTS QUALIFICATION ON AUDIT.EVENTS(TCATALOG, TSQUEMA, TTABLE );

# Embedded Client configuration
h2.client.init-sql[0]=DROP TABLE TIMER IF EXISTS
h2.client.init-sql[1]=CREATE TABLE IF NOT EXISTS TIMER(ID IDENTITY PRIMARY KEY, AN_ID INT, S_TIME VARCHAR(64), A_TIME TIME, A_DATE DATE, DATE_TIME TIMESTAMP, A_DECIMAL DECIMAL, A_DOUBLE DOUBLE, A_REAL REAL, A_BIGINT BIGINT)
h2.client.init-sql[2]=MERGE INTO TIMER(ID, S_TIME) VALUES(1, LOCALTIME)
h2.client.init-sql[3]=INSERT INTO TIMER(S_TIME, AN_ID, A_TIME, A_DATE, DATE_TIME, A_DECIMAL, A_DOUBLE, A_REAL, A_BIGINT) VALUES(LOCALTIME, RANDOM()*100, CURRENT_TIME, CURRENT_DATE, CURRENT_TIMESTAMP, RANDOM()*100, RANDOM()*100, RANDOM()*100, RANDOM()*100)
h2.client.init-sql[4]=CREATE TRIGGER IF NOT EXISTS PUBLIC.INSERT_AUDIT AFTER INSERT ON PUBLIC.TIMER FOR EACH ROW CALL "org.tayrona.dbserver.audit.InsertTrigger"
h2.client.init-sql[5]=CREATE TRIGGER IF NOT EXISTS PUBLIC.UPDATE_AUDIT AFTER UPDATE ON PUBLIC.TIMER FOR EACH ROW CALL "org.tayrona.dbserver.audit.UpdateTrigger"
h2.client.init-sql[6]=CREATE TRIGGER IF NOT EXISTS PUBLIC.DELETE_AUDIT AFTER DELETE ON PUBLIC.TIMER FOR EACH ROW CALL "org.tayrona.dbserver.audit.DeleteTrigger"
h2.client.init-sql[7]=CREATE TRIGGER IF NOT EXISTS PUBLIC.SELECT_AUDIT BEFORE SELECT ON PUBLIC.TIMER CALL "org.tayrona.dbserver.audit.SelectTrigger"
h2.client.init-sql[8]=CREATE TRIGGER IF NOT EXISTS PUBLIC.TIMER_ROLLBACK_INSERT_AUDIT AFTER ROLLBACK, INSERT ON PUBLIC.TIMER FOR EACH ROW CALL "org.tayrona.dbserver.audit.RollbackTrigger"
h2.client.init-sql[9]=CREATE TRIGGER IF NOT EXISTS PUBLIC.TIMER_ROLLBACK_UPDATE_AUDIT AFTER ROLLBACK, UPDATE ON PUBLIC.TIMER FOR EACH ROW CALL "org.tayrona.dbserver.audit.RollbackTrigger"
h2.client.init-sql[10]=CREATE TRIGGER IF NOT EXISTS PUBLIC.TIMER_ROLLBACK_DELETE_AUDIT AFTER ROLLBACK, DELETE ON PUBLIC.TIMER FOR EACH ROW CALL "org.tayrona.dbserver.audit.RollbackTrigger"

spring.datasource.username=sa
spring.datasource.password=
management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.include=info,health,env
logging.level.ROOT=INFO
logging.level.org.tayrona.dbserver=DEBUG
