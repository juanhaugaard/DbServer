server.port=8080
spring.application.name=DbServer

# Embedded Server configuration
#h2.server.options=-web -tcp -pg -baseDir ${user.home}/data -trace
h2.server.options=-web -tcp -pg -baseDir ${user.home}/data
h2.server.shutdown-delay=100

# Audit Configuration
h2.audit.catalog=EventsDB
h2.audit.url=jdbc:h2:${user.home}/data/${h2.audit.catalog};TRACE_LEVEL_FILE=4
#h2.audit.url=jdbc:h2:${user.home}/data/${h2.audit.catalog}
h2.audit.shutdown-delay=0
h2.audit.queue-latency=0
h2.audit.init-sql[0]=CREATE SCHEMA IF NOT EXISTS AUDIT;
h2.audit.init-sql[1]=CREATE TABLE IF NOT EXISTS AUDIT.EVENTS (TDAY INT NOT NULL, TSEQ INT NOT NULL, TCATALOG VARCHAR(64) NOT NULL, TSQUEMA VARCHAR(64) NOT NULL, TTABLE VARCHAR(64) NOT NULL, TACTION VARCHAR(32) NOT NULL, TUSER VARCHAR(64) NULL, PAYLOAD VARCHAR, TTIMESTAMP TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP() NOT NULL,CONSTRAINT PK_AUDIT PRIMARY KEY (TDAY, TSEQ));
h2.audit.init-sql[2]=CREATE ALIAS IF NOT EXISTS AUDIT_INITIALIZE FOR "org.tayrona.dbserver.audit.InitializeAudit.execute"
h2.audit.init-sql[3]=CREATE ALIAS IF NOT EXISTS AUDIT_LOG_ENABLE FOR "org.tayrona.dbserver.audit.EnableLog.execute"
h2.audit.init-sql[4]=CREATE ALIAS IF NOT EXISTS AUDIT_LOG_DISABLE FOR "org.tayrona.dbserver.audit.DisableLog.execute"
#h2.audit.init-sql[5]=SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
#h2.audit.init-sql[6]=SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL REPEATABLE READ
#h2.audit.init-sql[7]=CREATE INDEX IF NOT EXISTS QUALIFICATION ON AUDIT.EVENTS(TCATALOG, TSQUEMA, TTABLE );

h2.audit.trigger-create[0]=CREATE TRIGGER IF NOT EXISTS %1$s_INSERT_ROLLBACK_AUDIT AFTER INSERT, ROLLBACK ON %1$s FOR EACH ROW CALL \"org.tayrona.dbserver.audit.InsertTrigger\"
h2.audit.trigger-create[1]=CREATE TRIGGER IF NOT EXISTS %1$s_UPDATE_ROLLBACK_AUDIT AFTER UPDATE, ROLLBACK ON %1$s FOR EACH ROW CALL \"org.tayrona.dbserver.audit.UpdateTrigger\"
h2.audit.trigger-create[2]=CREATE TRIGGER IF NOT EXISTS %1$s_DELETE_ROLLBACK_AUDIT AFTER DELETE, ROLLBACK ON %1$s FOR EACH ROW CALL \"org.tayrona.dbserver.audit.DeleteTrigger\"
h2.audit.trigger-create[3]=CREATE TRIGGER IF NOT EXISTS %1$s_SELECT_AUDIT BEFORE SELECT ON %1$s CALL \"org.tayrona.dbserver.audit.SelectTrigger\"

h2.audit.trigger-drop[0]=DROP TRIGGER IF EXISTS %1$s_INSERT_ROLLBACK_AUDIT
h2.audit.trigger-drop[1]=DROP TRIGGER IF EXISTS %1$s_UPDATE_ROLLBACK_AUDIT
h2.audit.trigger-drop[2]=DROP TRIGGER IF EXISTS %1$s_DELETE_ROLLBACK_AUDIT
h2.audit.trigger-drop[3]=DROP TRIGGER IF EXISTS %1$s_SELECT_AUDIT

# Embedded Client configuration
h2.client.interval=-1000
h2.client.initial-delay=10000
h2.client.init-sql[0]=INSERT INTO PUBLIC.TIMER(S_TIME, AN_ID, A_TIME, A_DATE, DATE_TIME, A_DECIMAL, A_DOUBLE, A_REAL, A_BIGINT) VALUES(LOCALTIME, RANDOM()*100, CURRENT_TIME, CURRENT_DATE, CURRENT_TIMESTAMP, RANDOM()*100, RANDOM()*100, RANDOM()*100, RANDOM()*100)
h2.client.init-sql[1]=CREATE TABLE IF NOT EXISTS PUBLIC.TIMER(ID IDENTITY PRIMARY KEY, AN_ID INT, S_TIME VARCHAR(64), A_TIME TIME, A_DATE DATE, DATE_TIME TIMESTAMP, A_DECIMAL DECIMAL, A_DOUBLE DOUBLE, A_REAL REAL, A_BIGINT BIGINT)
h2.client.init-sql[2]=CALL AUDIT_LOG_ENABLE('PUBLIC.TIMER')
h2.client.init-sql[3]=SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
#h2.client.init-sql[4]=SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL REPEATABLE READ

spring.datasource.username=sa
spring.datasource.password=
spring.datasource.connection-test-query=SELECT 1 FROM DUAL
spring.datasource.minimum-idle=1
spring.datasource.maximum-pool-size=2
#spring.datasource.auto-commit=false
spring.datasource.hikari.connection-test-query=SELECT 1 FROM DUAL
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.maximum-pool-size=2
#spring.datasource.hikari.auto-commit=false

management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.include=info,health,env
logging.level.ROOT=INFO
logging.level.h2database=WARN
logging.level.org.tayrona.dbserver=DEBUG
